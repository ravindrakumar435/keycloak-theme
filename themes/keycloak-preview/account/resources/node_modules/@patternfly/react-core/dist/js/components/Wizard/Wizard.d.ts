import * as React from 'react';
import { BackgroundImageSrc } from '../BackgroundImage';
import { BackgroundImageSrcMap } from '../BackgroundImage';
export interface WizardStep {
    /** Optional identifier */
    id?: string | number;
    /** The name of the step */
    name: string;
    /** The component to render in the main body */
    component?: any;
    /** The condition needed to enable the Next button */
    enableNext?: boolean;
    /** True to hide the Cancel button */
    hideCancelButton?: boolean;
    /** True to hide the Back button */
    hideBackButton?: boolean;
    /** Sub steps */
    steps?: any[];
}
interface ComputedStep extends WizardStep {
    /** The condition needed to be able to navigate to this step */
    canJumpTo?: boolean;
}
export declare type WizardStepFunctionType = (newStep: {
    id?: string | number;
    name: string;
}, prevStep: {
    prevId?: string | number;
    prevName: string;
}) => void;
export interface WizardProps {
    /** True to show the wizard */
    isOpen?: boolean;
    /** The wizard title */
    title: string;
    /** The wizard description */
    description?: string;
    /** Mapping of image sizes to image paths */
    backgroundImgSrc?: string | BackgroundImageSrcMap;
    /** Calback function to close the wizard */
    onClose?(): void;
    /** Callback function to save at the end of the wizard, if not specified uses onClose */
    onSave?(): void;
    /** Callback function after Next button is clicked */
    onNext?: WizardStepFunctionType;
    /** Callback function after Back button is clicked */
    onBack?: WizardStepFunctionType;
    /** Calback function when a step in the nav is clicked */
    onGoToStep?: WizardStepFunctionType;
    /** Additional classes spread to the Wizard */
    className?: string;
    /** The wizard steps configuration object */
    steps: WizardStep[];
    /** The step to start the wizard at (1 or higher) */
    startAtStep?: number;
    /** The Next button text */
    nextButtonText?: string;
    /** The Back button text */
    backButtonText?: string;
    /** The Cancel button text */
    cancelButtonText?: string;
    /** The text for the Next button on the last step */
    lastStepButtonText?: string;
    /** Alignment of the footer items */
    footerRightAlign?: boolean;
    /** aria-label for the close button */
    ariaLabelCloseButton?: string;
    /** aria-label for the Nav */
    ariaLabelNav?: string;
    /** Can remove the default padding around the main body content by setting this to false */
    hasBodyPadding?: boolean;
}
declare class Wizard extends React.Component<WizardProps> {
    static currentId: number;
    static defaultProps: {
        isOpen: boolean;
        description: string;
        backgroundImgSrc: {
            [BackgroundImageSrc.xs]: string;
            [BackgroundImageSrc.xs2x]: string;
            [BackgroundImageSrc.sm]: string;
            [BackgroundImageSrc.sm2x]: string;
            [BackgroundImageSrc.lg]: string;
            [BackgroundImageSrc.filter]: string;
        };
        onBack: null;
        onNext: null;
        onGoToStep: null;
        className: string;
        startAtStep: number;
        nextButtonText: string;
        backButtonText: string;
        cancelButtonText: string;
        lastStepButtonText: string;
        footerRightAlign: boolean;
        ariaLabelCloseButton: string;
        ariaLabelNav: string;
        hasBodyPadding: boolean;
    };
    container?: HTMLDivElement;
    titleId: string;
    descriptionId: string;
    constructor(props: WizardProps);
    state: {
        currentStep: number;
        isNavOpen: boolean;
    };
    handleKeyClicks: (event: KeyboardEvent) => void;
    toggleSiblingsFromScreenReaders: (hide: boolean) => void;
    onNext: () => void;
    onBack: () => void;
    goToStep: (step: number) => void;
    getFlattenedSteps: () => WizardStep[];
    getFlattenedStepsIndex: (stepName: string) => number;
    initSteps: (steps: WizardStep[], activeStep: WizardStep) => ComputedStep[];
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): false | React.ReactPortal | null | undefined;
}
export { Wizard };
