"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _selectCss = _interopRequireDefault(require("../../@patternfly/patternfly/components/Select/select.css.js"));

var _reactStyles = require("@patternfly/react-styles");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _SingleSelect = _interopRequireDefault(require("./SingleSelect"));

var _SelectToggle = _interopRequireDefault(require("./SelectToggle"));

var _selectConstants = require("./selectConstants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// seed for the aria-labelledby ID
var currentId = 0;
var propTypes = {
  /** Content rendered inside the Select */
  children: _propTypes.default.node,

  /** Classes applied to the root of the Select */
  className: _propTypes.default.string,

  /** Flag to indicate if select is expanded */
  isExpanded: _propTypes.default.bool,

  /** Placeholder text of Select */
  placeholderText: _propTypes.default.string,

  /** Selected item */
  selections: _propTypes.default.string,

  /** Id of label for the Select aria-labelledby */
  ariaLabelledBy: _propTypes.default.string,

  /** Callback for selection behavior */
  onSelect: _propTypes.default.func.isRequired,

  /** Callback for toggle button behavior */
  onToggle: _propTypes.default.func.isRequired,

  /** Variant of rendered Select */
  variant: _propTypes.default.oneOf(['single']),

  /** Width of the select container as a number of px or string percentage */
  width: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /** Additional props are spread to the container <ul> */
  '': _propTypes.default.any
};
var defaultProps = {
  children: null,
  className: '',
  isExpanded: false,
  ariaLabelledBy: '',
  selections: null,
  placeholderText: null,
  variant: _selectConstants.SelectVariant.single,
  width: '100%'
};

var Select =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Select, _React$Component);

  function Select() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Select);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Select)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "parentRef", _react.default.createRef());

    _defineProperty(_assertThisInitialized(_this), "state", {
      openedOnEnter: false
    });

    _defineProperty(_assertThisInitialized(_this), "onEnter", function () {
      _this.setState({
        openedOnEnter: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "onClose", function () {
      _this.setState({
        openedOnEnter: false
      });
    });

    return _this;
  }

  _createClass(Select, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          className = _this$props.className,
          variant = _this$props.variant,
          onToggle = _this$props.onToggle,
          onSelect = _this$props.onSelect,
          isExpanded = _this$props.isExpanded,
          selections = _this$props.selections,
          ariaLabelledBy = _this$props.ariaLabelledBy,
          placeholderText = _this$props.placeholderText,
          width = _this$props.width,
          props = _objectWithoutProperties(_this$props, ["children", "className", "variant", "onToggle", "onSelect", "isExpanded", "selections", "ariaLabelledBy", "placeholderText", "width"]);

      var openedOnEnter = this.state.openedOnEnter;
      var selectToggleId = "pf-toggle-id-".concat(currentId++);
      var childPlaceholderText = null;

      if (!selections && !placeholderText) {
        var childPlaceholder = children.filter(function (child) {
          return child.props.isPlaceholder === true;
        });
        childPlaceholderText = childPlaceholder[0] && childPlaceholder[0].props.value || children[0] && children[0].props.value;
      }

      return _react.default.createElement("div", {
        className: (0, _reactStyles.css)(_selectCss.default.select, isExpanded && _selectCss.default.modifiers.expanded, className),
        ref: this.parentRef,
        style: {
          width: width
        }
      }, _react.default.createElement(_selectConstants.SelectContext.Provider, {
        value: {
          onSelect: onSelect,
          onClose: this.onClose
        }
      }, variant === 'single' && _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_SelectToggle.default, {
        id: selectToggleId,
        parentRef: this.parentRef.current,
        isExpanded: isExpanded,
        onToggle: onToggle,
        onEnter: this.onEnter,
        onClose: this.onClose,
        "aria-labelledby": "".concat(ariaLabelledBy, " ").concat(selectToggleId),
        style: {
          width: width
        }
      }, selections || placeholderText || childPlaceholderText), isExpanded && _react.default.createElement(_SingleSelect.default, _extends({}, props, {
        selected: selections,
        openedOnEnter: openedOnEnter,
        "aria-labelledby": ariaLabelledBy
      }), children))));
    }
  }]);

  return Select;
}(_react.default.Component);

Select.propTypes = propTypes;
Select.defaultProps = defaultProps;
var _default = Select;
exports.default = _default;