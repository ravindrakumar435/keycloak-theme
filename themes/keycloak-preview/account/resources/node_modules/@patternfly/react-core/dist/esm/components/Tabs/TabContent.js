function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import { css } from '@patternfly/react-styles';
var propTypes = {
  /** the index of the active tab */
  activeKey: PropTypes.number,

  /** content rendered inside the tab content area. */
  child: PropTypes.node,

  /** id passed from parent to identify the content section */
  id: PropTypes.string.isRequired
};
var defaultProps = {
  activeKey: 0,
  child: null
};

var TabContent = function TabContent(_ref) {
  var id = _ref.id,
      activeKey = _ref.activeKey,
      child = _ref.child,
      props = _objectWithoutProperties(_ref, ["id", "activeKey", "child"]);

  return React.createElement("section", _extends({
    hidden: child.props.eventKey !== activeKey,
    className: css('pf-c-tab-content', child.props.className),
    id: "pf-tab-section-".concat(child.props.eventKey, "-").concat(id),
    "aria-labelledby": "pf-tab-".concat(child.props.eventKey, "-").concat(id),
    role: "tabpanel",
    tabIndex: "0"
  }, props), child.props.children);
};

TabContent.propTypes = propTypes;
TabContent.defaultProps = defaultProps;
export default TabContent;