"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Wizard = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var ReactDOM = _interopRequireWildcard(require("react-dom"));

var _exenv = require("exenv");

var _constants = require("../../helpers/constants");

var _reactStyles = require("@patternfly/react-styles");

var _wizardCss = _interopRequireDefault(require("../../@patternfly/patternfly/components/Wizard/wizard.css.js"));

var _Backdrop = require("../Backdrop");

var _Bullseye = require("../../layouts/Bullseye");

var _BackgroundImage = require("../BackgroundImage");

var _Button = require("../Button");

var _WizardHeader = _interopRequireDefault(require("./WizardHeader"));

var _WizardToggle = _interopRequireDefault(require("./WizardToggle"));

var _WizardNav = _interopRequireDefault(require("./WizardNav"));

var _WizardNavItem = _interopRequireDefault(require("./WizardNavItem"));

var _images;

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// because of the way this module is exported, cannot use regular import syntax
var FocusTrap = require('focus-trap-react');

;
var images = (_images = {}, _defineProperty(_images, _BackgroundImage.BackgroundImageSrc.xs, '/assets/images/pfbg_576.jpg'), _defineProperty(_images, _BackgroundImage.BackgroundImageSrc.xs2x, '/assets/images/pfbg_576@2x.jpg'), _defineProperty(_images, _BackgroundImage.BackgroundImageSrc.sm, '/assets/images/pfbg_768.jpg'), _defineProperty(_images, _BackgroundImage.BackgroundImageSrc.sm2x, '/assets/images/pfbg_768@2x.jpg'), _defineProperty(_images, _BackgroundImage.BackgroundImageSrc.lg, '/assets/images/pfbg_1200.jpg'), _defineProperty(_images, _BackgroundImage.BackgroundImageSrc.filter, '/assets/images/background-filter.svg#image_overlay'), _images);

var Wizard =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Wizard, _React$Component);

  function Wizard(props) {
    var _this;

    _classCallCheck(this, Wizard);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Wizard).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "container", undefined);

    _defineProperty(_assertThisInitialized(_this), "titleId", "pf-wizard-title-0");

    _defineProperty(_assertThisInitialized(_this), "descriptionId", "pf-wizard-description-0");

    _defineProperty(_assertThisInitialized(_this), "state", {
      currentStep: _this.props.startAtStep && Number.isInteger(_this.props.startAtStep) ? _this.props.startAtStep : 1,
      isNavOpen: false
    });

    _defineProperty(_assertThisInitialized(_this), "handleKeyClicks", function (event) {
      if (event.keyCode === _constants.KEY_CODES.ESCAPE_KEY) {
        if (_this.state.isNavOpen) {
          _this.setState({
            isNavOpen: !_this.state.isNavOpen
          });
        } else if (_this.props.isOpen) {
          _this.props.onClose();
        }
      }
    });

    _defineProperty(_assertThisInitialized(_this), "toggleSiblingsFromScreenReaders", function (hide) {
      var bodyChildren = document.body.children;

      var _arr = Array.from(bodyChildren);

      for (var _i = 0; _i < _arr.length; _i++) {
        var child = _arr[_i];

        if (child !== _this.container) {
          hide ? child.setAttribute('aria-hidden', '' + hide) : child.removeAttribute('aria-hidden');
        }
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onNext", function () {
      var _this$props = _this.props,
          onNext = _this$props.onNext,
          onClose = _this$props.onClose,
          onSave = _this$props.onSave;
      var currentStep = _this.state.currentStep;

      var flattenedSteps = _this.getFlattenedSteps();

      var maxSteps = flattenedSteps.length;

      if (currentStep >= maxSteps) {
        // Hit the save button at the end of the wizard
        if (onSave) {
          return onSave();
        }

        return onClose();
      } else {
        var newStep = currentStep + 1;

        _this.setState({
          currentStep: newStep
        });

        var _flattenedSteps = flattenedSteps[currentStep - 1],
            prevId = _flattenedSteps.id,
            prevName = _flattenedSteps.name;
        var _flattenedSteps2 = flattenedSteps[newStep - 1],
            _id = _flattenedSteps2.id,
            _name = _flattenedSteps2.name;
        return onNext && onNext({
          id: _id,
          name: _name
        }, {
          prevId: prevId,
          prevName: prevName
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onBack", function () {
      var onBack = _this.props.onBack;
      var currentStep = _this.state.currentStep;

      var flattenedSteps = _this.getFlattenedSteps();

      var newStep = currentStep - 1 <= 0 ? 0 : currentStep - 1;

      _this.setState({
        currentStep: newStep
      });

      var _flattenedSteps3 = flattenedSteps[currentStep - 1],
          prevId = _flattenedSteps3.id,
          prevName = _flattenedSteps3.name;
      var _flattenedSteps4 = flattenedSteps[newStep - 1],
          id = _flattenedSteps4.id,
          name = _flattenedSteps4.name;
      return onBack && onBack({
        id: id,
        name: name
      }, {
        prevId: prevId,
        prevName: prevName
      });
    });

    _defineProperty(_assertThisInitialized(_this), "goToStep", function (step) {
      var onGoToStep = _this.props.onGoToStep;
      var currentStep = _this.state.currentStep;

      var flattenedSteps = _this.getFlattenedSteps();

      var maxSteps = flattenedSteps.length;

      if (step < 1) {
        step = 1;
      } else if (step > maxSteps) {
        step = maxSteps;
      }

      _this.setState({
        currentStep: step
      });

      var _flattenedSteps5 = flattenedSteps[currentStep - 1],
          prevId = _flattenedSteps5.id,
          prevName = _flattenedSteps5.name;
      var _flattenedSteps6 = flattenedSteps[step - 1],
          id = _flattenedSteps6.id,
          name = _flattenedSteps6.name;
      return onGoToStep && onGoToStep({
        id: id,
        name: name
      }, {
        prevId: prevId,
        prevName: prevName
      });
    });

    _defineProperty(_assertThisInitialized(_this), "getFlattenedSteps", function () {
      var steps = _this.props.steps;
      var flattenedSteps = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = steps[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var step = _step.value;

          if (step.steps) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = step.steps[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var childStep = _step2.value;
                flattenedSteps.push(childStep);
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                  _iterator2.return();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          } else {
            flattenedSteps.push(step);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return flattenedSteps;
    });

    _defineProperty(_assertThisInitialized(_this), "getFlattenedStepsIndex", function (stepName) {
      var flattenedSteps = _this.getFlattenedSteps();

      for (var i = 0; i < flattenedSteps.length; i++) {
        if (flattenedSteps[i].name === stepName) {
          return i + 1;
        }
      }

      return 0;
    });

    _defineProperty(_assertThisInitialized(_this), "initSteps", function (steps, activeStep) {
      // Set canJumpTo on all steps leading up to and including the active step
      var computedSteps = steps;
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = computedSteps[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var step = _step3.value;
          var found = false;

          if (step.steps) {
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
              for (var _iterator4 = step.steps[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var subStep = _step4.value;

                if (activeStep === subStep) {
                  // one of the children matches
                  subStep.canJumpTo = true;
                  found = true;
                  break;
                } else {
                  subStep.canJumpTo = true;
                }
              }
            } catch (err) {
              _didIteratorError4 = true;
              _iteratorError4 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
                  _iterator4.return();
                }
              } finally {
                if (_didIteratorError4) {
                  throw _iteratorError4;
                }
              }
            }
          }

          if (found) {
            break;
          }

          if (activeStep === step) {
            step.canJumpTo = true;
            break;
          } else {
            step.canJumpTo = true;
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      return computedSteps;
    });

    var newId = Wizard.currentId++;
    _this.titleId = "pf-wizard-title-".concat(newId);
    _this.descriptionId = "pf-wizard-description-".concat(newId);
    return _this;
  }

  _createClass(Wizard, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.container) {
        document.body.appendChild(this.container);
      }

      this.toggleSiblingsFromScreenReaders(true);
      document.addEventListener('keydown', this.handleKeyClicks, false);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.container) {
        document.body.removeChild(this.container);
      }

      this.toggleSiblingsFromScreenReaders(false);
      document.removeEventListener('keydown', this.handleKeyClicks, false);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      if (!_exenv.canUseDOM) {
        return null;
      }

      if (!this.container) {
        this.container = document.createElement('div');
      }

      var _this$props2 = this.props,
          isOpen = _this$props2.isOpen,
          title = _this$props2.title,
          description = _this$props2.description,
          _this$props2$backgrou = _this$props2.backgroundImgSrc,
          backgroundImgSrc = _this$props2$backgrou === void 0 ? images : _this$props2$backgrou,
          onClose = _this$props2.onClose,
          onSave = _this$props2.onSave,
          onBack = _this$props2.onBack,
          onNext = _this$props2.onNext,
          onGoToStep = _this$props2.onGoToStep,
          className = _this$props2.className,
          steps = _this$props2.steps,
          startAtStep = _this$props2.startAtStep,
          nextButtonText = _this$props2.nextButtonText,
          backButtonText = _this$props2.backButtonText,
          cancelButtonText = _this$props2.cancelButtonText,
          lastStepButtonText = _this$props2.lastStepButtonText,
          footerRightAlign = _this$props2.footerRightAlign,
          ariaLabelCloseButton = _this$props2.ariaLabelCloseButton,
          ariaLabelNav = _this$props2.ariaLabelNav,
          hasBodyPadding = _this$props2.hasBodyPadding,
          rest = _objectWithoutProperties(_this$props2, ["isOpen", "title", "description", "backgroundImgSrc", "onClose", "onSave", "onBack", "onNext", "onGoToStep", "className", "steps", "startAtStep", "nextButtonText", "backButtonText", "cancelButtonText", "lastStepButtonText", "footerRightAlign", "ariaLabelCloseButton", "ariaLabelNav", "hasBodyPadding"]);

      var _this$state = this.state,
          currentStep = _this$state.currentStep,
          isNavOpen = _this$state.isNavOpen;
      var flattenedSteps = this.getFlattenedSteps();
      var activeStep = flattenedSteps[currentStep - 1];
      var computedSteps = this.initSteps(steps, activeStep);
      var firstStep = activeStep === flattenedSteps[0];
      var lastStep = activeStep === flattenedSteps[flattenedSteps.length - 1];
      var isValid = activeStep.enableNext !== undefined ? activeStep.enableNext : true;

      var nav = function nav(isWizardNavOpen) {
        return React.createElement(_WizardNav.default, {
          isOpen: isWizardNavOpen,
          ariaLabel: ariaLabelNav
        }, computedSteps.map(function (step, index) {
          var enabled;
          var navItemStep;

          if (step.steps) {
            var hasActiveChild = false;
            var canJumpToParent = false;
            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
              for (var _iterator5 = step.steps[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                var subStep = _step5.value;

                if (activeStep === subStep) {
                  // one of the children matches
                  hasActiveChild = true;
                }

                if (subStep.canJumpTo) {
                  canJumpToParent = true;
                }
              }
            } catch (err) {
              _didIteratorError5 = true;
              _iteratorError5 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
                  _iterator5.return();
                }
              } finally {
                if (_didIteratorError5) {
                  throw _iteratorError5;
                }
              }
            }

            navItemStep = _this2.getFlattenedStepsIndex(step.steps[0].name);
            return React.createElement(_WizardNavItem.default, {
              hasChildren: true,
              key: index,
              label: step.name,
              current: hasActiveChild,
              disabled: !canJumpToParent,
              step: navItemStep,
              onNavItemClick: _this2.goToStep
            }, React.createElement(_WizardNav.default, {
              returnList: true
            }, step.steps.map(function (childStep, indexChild) {
              navItemStep = _this2.getFlattenedStepsIndex(childStep.name);
              enabled = Boolean(childStep.canJumpTo);
              return React.createElement(_WizardNavItem.default, {
                key: "child_".concat(indexChild),
                label: childStep.name,
                current: activeStep === childStep,
                disabled: !enabled,
                step: navItemStep,
                onNavItemClick: _this2.goToStep
              });
            })));
          }

          navItemStep = _this2.getFlattenedStepsIndex(step.name);
          enabled = Boolean(step.canJumpTo);
          return React.createElement(_WizardNavItem.default, {
            key: index,
            label: step.name,
            current: activeStep === step,
            disabled: !enabled,
            step: navItemStep,
            onNavItemClick: _this2.goToStep
          });
        }));
      };

      return isOpen && ReactDOM.createPortal(React.createElement(FocusTrap, {
        focusTrapOptions: {
          clickOutsideDeactivates: true
        }
      }, React.createElement(_Backdrop.Backdrop, null, React.createElement(_Bullseye.Bullseye, null, React.createElement("div", _extends({}, rest, {
        className: (0, _reactStyles.css)(_wizardCss.default.wizard, className),
        role: "dialog",
        "aria-modal": "true",
        "aria-labelledby": this.titleId,
        "aria-describedby": description ? this.descriptionId : undefined
      }), React.createElement(_BackgroundImage.BackgroundImage, {
        src: backgroundImgSrc
      }), React.createElement(_WizardHeader.default, {
        titleId: this.titleId,
        descriptionId: this.descriptionId,
        onClose: onClose,
        title: title,
        description: description,
        ariaLabel: ariaLabelCloseButton
      }), React.createElement(_WizardToggle.default, {
        isNavOpen: isNavOpen,
        onNavToggle: function onNavToggle(isNavOpen) {
          return _this2.setState({
            isNavOpen: isNavOpen
          });
        },
        nav: nav,
        steps: steps,
        activeStep: activeStep,
        hasBodyPadding: hasBodyPadding
      }, React.createElement("footer", {
        className: (0, _reactStyles.css)(_wizardCss.default.wizardFooter, footerRightAlign && 'pf-m-align-right')
      }, React.createElement(_Button.Button, {
        variant: "primary",
        type: "submit",
        onClick: this.onNext,
        isDisabled: !isValid
      }, lastStep ? lastStepButtonText : nextButtonText), !firstStep && !activeStep.hideBackButton && React.createElement(_Button.Button, {
        variant: "secondary",
        onClick: this.onBack
      }, backButtonText), !activeStep.hideCancelButton && React.createElement(_Button.Button, {
        variant: "link",
        onClick: onClose
      }, cancelButtonText))))))), this.container);
    }
  }]);

  return Wizard;
}(React.Component);

exports.Wizard = Wizard;

_defineProperty(Wizard, "propTypes", {
  isOpen: _propTypes.default.bool,
  title: _propTypes.default.string.isRequired,
  description: _propTypes.default.string,
  backgroundImgSrc: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.any]),
  onNext: _propTypes.default.func,
  onBack: _propTypes.default.func,
  onGoToStep: _propTypes.default.func,
  className: _propTypes.default.string,
  steps: _propTypes.default.arrayOf(_propTypes.default.shape({
    id: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    name: _propTypes.default.string.isRequired,
    component: _propTypes.default.any,
    enableNext: _propTypes.default.bool,
    hideCancelButton: _propTypes.default.bool,
    hideBackButton: _propTypes.default.bool,
    steps: _propTypes.default.arrayOf(_propTypes.default.any)
  })).isRequired,
  startAtStep: _propTypes.default.number,
  nextButtonText: _propTypes.default.string,
  backButtonText: _propTypes.default.string,
  cancelButtonText: _propTypes.default.string,
  lastStepButtonText: _propTypes.default.string,
  footerRightAlign: _propTypes.default.bool,
  ariaLabelCloseButton: _propTypes.default.string,
  ariaLabelNav: _propTypes.default.string,
  hasBodyPadding: _propTypes.default.bool
});

_defineProperty(Wizard, "currentId", 0);

_defineProperty(Wizard, "defaultProps", {
  isOpen: false,
  description: '',
  backgroundImgSrc: images,
  onBack: null,
  onNext: null,
  onGoToStep: null,
  className: '',
  startAtStep: 1,
  nextButtonText: 'Next',
  backButtonText: 'Back',
  cancelButtonText: 'Cancel',
  lastStepButtonText: 'Save',
  footerRightAlign: false,
  ariaLabelCloseButton: 'Close',
  ariaLabelNav: 'Steps',
  hasBodyPadding: true
});