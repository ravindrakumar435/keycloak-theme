var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function getNodes(node) {
  var nodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  if (node.children) {
    var children = typeof node.children === 'function' ? node.children() : node.children;

    children.forEach(function (child) {
      return getNodes(child, nodes);
    });
  }

  if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object') {
    nodes.push(node);
  }

  return nodes;
}

export { getNodes };